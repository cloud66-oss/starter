package main

import (
	"encoding/json"
	"errors"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"os/signal"
	"path/filepath"
	"strings"
	"regexp"

	"github.com/bugsnag/bugsnag-go"
	"github.com/cloud66/starter/common"
	"github.com/heroku/docker-registry-client/registry"
	"github.com/mitchellh/go-homedir"

	"gopkg.in/yaml.v2"
	"bufio"
	"unicode"
	"log"
	"strconv"
	"math"
)

type downloadFile struct {
	URL  string `json:"url"`
	Name string `json:"name"`
}

type analysisResult struct {
	Ok                        bool
	Language                  string
	LanguageVersion           string
	SupportedLanguageVersions []string

	Framework        string
	FrameworkVersion string

	Databases      []string
	Warnings       []string
	Dockerfile     string
	Service        string
	DockerCompose  string
	StartCommands  []string
	BuildCommands  []string
	DeployCommands []string
}

type templateDefinition struct {
	Version           string         `json:"version"`
	Dockerfiles       []downloadFile `json:"dockerfiles"`
	ServiceYmls       []downloadFile `json:"service-ymls"`
	DockerComposeYmls []downloadFile `json:"docker-compose-ymls"`
}

var (
	flagPath        string
	flagNoPrompt    bool
	flagEnvironment string
	flagTemplates   string
	flagBranch      string
	flagVersion     string
	flagGenerator   string
	flagOverwrite   bool
	flagConfig      string
	flagDaemon      bool
	flagRegistry    bool

	flagIn  string
	flagOut string

	config = &Config{}

	// VERSION holds the starter version
	VERSION = "dev"
	// BUILDDATE holds the date starter was built
	BUILDDATE string

	serviceYAMLTemplateDir       string
	dockerfileTemplateDir        string
	dockerComposeYAMLTemplateDir string
)

const (
	templatePath = "https://raw.githubusercontent.com/cloud66/starter/{{.branch}}/templates/templates.json"
)

func init() {
	bugsnag.Configure(bugsnag.Configuration{
		APIKey:     "916591d12b54e689edde67e641c5843d",
		AppVersion: VERSION,
	})

	flag.StringVar(&flagPath, "p", "", "project path")
	flag.StringVar(&flagConfig, "c", "", "configuration path for the daemon mode")
	flag.BoolVar(&flagNoPrompt, "y", false, "do not prompt user")
	flag.BoolVar(&flagOverwrite, "overwrite", false, "overwrite existing files")
	flag.StringVar(&flagEnvironment, "e", "production", "set project environment")
	flag.StringVar(&flagTemplates, "templates", "", "location of the templates directory")
	flag.StringVar(&flagBranch, "branch", "master", "template branch in github")
	flag.BoolVar(&flagDaemon, "daemon", false, "runs Starter in daemon mode")
	flag.BoolVar(&flagRegistry, "registry", false, "check base images against docker registry")

	flag.StringVar(&flagIn, "in", "", "file to be converted")
	flag.StringVar(&flagOut, "out", "", "target format")

	flag.StringVar(&flagVersion, "v", "", "version of starter")
	flag.StringVar(&flagGenerator, "g", "dockerfile", `what kind of files need to be generated by starter:
	-g dockerfile: only the Dockerfile
	-g docker-compose: only the docker-compose.yml + Dockerfile
	-g service: only the service.yml + Dockerfile (cloud 66 specific)
	-g dockerfile,service,docker-compose (all files)`)
}

// downloading templates from github and putting them into homedir
func getTempaltes(tempDir string) error {
	common.PrintlnL0("Checking templates in %s", tempDir)

	var tv templateDefinition
	err := fetchJSON(strings.Replace(templatePath, "{{.branch}}", flagBranch, -1), nil, &tv)
	if err != nil {
		return err
	}

	// is there a local copy?
	if _, err := os.Stat(filepath.Join(tempDir, "templates.json")); os.IsNotExist(err) {
		// no file. downloading
		common.PrintlnL1("No local templates found. Downloading now.")
		err := os.MkdirAll(tempDir, 0777)
		if err != nil {
			return err
		}

		err = downloadTemplates(tempDir, tv)
		if err != nil {
			return err
		}
	}

	// load the local json
	templatesLocal, err := ioutil.ReadFile(filepath.Join(tempDir, "templates.json"))
	if err != nil {
		return err
	}
	var localTv templateDefinition
	err = json.Unmarshal(templatesLocal, &localTv)
	if err != nil {
		return err
	}

	// compare
	if localTv.Version != tv.Version {
		common.PrintlnL2("Newer templates found. Downloading them now")
		// they are different, we need to download the new ones
		err = downloadTemplates(tempDir, tv)
		if err != nil {
			return err
		}
	} else {
		common.PrintlnL1("Local templates are up to date")
	}

	return nil
}

func downloadTemplates(tempDir string, td templateDefinition) error {
	err := downloadSingleFile(tempDir, downloadFile{URL: strings.Replace(templatePath, "{{.branch}}", flagBranch, -1), Name: "templates.json"})
	if err != nil {
		return err
	}

	for _, temp := range td.Dockerfiles {
		err := downloadSingleFile(tempDir, temp)
		if err != nil {
			return err
		}
	}

	for _, temp := range td.ServiceYmls {
		err := downloadSingleFile(tempDir, temp)
		if err != nil {
			return err
		}
	}

	for _, temp := range td.DockerComposeYmls {
		err := downloadSingleFile(tempDir, temp)
		if err != nil {
			return err
		}
	}

	return nil
}

func downloadSingleFile(tempDir string, temp downloadFile) error {
	r, err := fetch(strings.Replace(temp.URL, "{{.branch}}", flagBranch, -1), nil)
	if err != nil {
		return err
	}
	defer r.Close()

	output, err := os.Create(filepath.Join(tempDir, temp.Name))
	if err != nil {
		return err
	}
	defer output.Close()

	_, err = io.Copy(output, r)
	if err != nil {
		return err
	}

	return nil
}

func main() {
	args := os.Args[1:]

	if len(args) > 0 && (args[0] == "help" || args[0] == "-h") {
		fmt.Printf("Starter (%s) Help\n", VERSION)
		flag.PrintDefaults()
		return
	}

	if len(args) > 0 && (args[0] == "version" || args[0] == "-v") {
		fmt.Printf("Starter version: %s (%s)\n", VERSION, BUILDDATE)
		return
	}

	flag.Parse()

	if flagDaemon && flagConfig != "" {
		if _, err := os.Stat(flagConfig); os.IsNotExist(err) {
			common.PrintError("Configuration directory not found: %s", flagConfig)
			os.Exit(1)
		}

		common.PrintL0("Using %s for configuration", flagConfig)
		conf, err := ReadFromFile(flagConfig)
		if err != nil {
			common.PrintError("Failed to load configuration file due to %s", err.Error())
			os.Exit(1)
		}
		*config = *conf
	} else {
		config.SetDefaults()
	}

	common.PrintlnTitle("Starter (c) 2016 Cloud66 Inc.")

	// Run in daemon mode
	if flagDaemon {
		signalChan := make(chan os.Signal, 1)
		cleanupDone := make(chan bool)
		signal.Notify(signalChan, os.Interrupt)
		config.template_path = flagTemplates
		config.use_registry = flagRegistry

		api := NewAPI(config)
		err := api.StartAPI()
		if err != nil {
			common.PrintError("Unable to start the API due to %s", err.Error())
			os.Exit(1)
		}

		go func() {
			for _ = range signalChan {
				common.PrintL0("Received an interrupt, stopping services\n")
				cleanupDone <- true
			}
		}()

		<-cleanupDone
		os.Exit(0)
	}

	// IN-OUT trigger
	if flagIn != "" {
		if flagOut != "service.yml" {
			common.PrintError("You have to specify a valid OUT format\n")
		} else {
			fmt.Printf("Detected IN file as %s and OUT as %s\n", string(flagIn), string(flagOut))

			inFile := string(flagIn)
			outFile := string(flagOut)
			ok, _ := transform(inFile, outFile)
			if ok == true {
				common.PrintlnTitle("Done!")
			}
		}
		return
	}
	if flagIn == "" && flagOut != "" {
		common.PrintError("You have to specify an IN file\n")
		return
	}

	result, err := analyze(
		true,
		flagPath,
		flagTemplates,
		flagEnvironment,
		flagNoPrompt,
		flagOverwrite,
		flagGenerator,
		"",
		"",
		flagRegistry)

	if err != nil {
		common.PrintError(err.Error())
		os.Exit(1)
	}
	if len(result.Warnings) > 0 {
		common.PrintlnWarning("Warnings:")
		for _, warning := range result.Warnings {
			common.PrintlnWarning(" * " + warning)
		}
	}

	common.PrintlnL0("Now you can add the newly created Dockerfile to your git")
	common.PrintlnL0("To do that you will need to run the following commands:\n\n")
	fmt.Printf("cd %s\n", flagPath)
	fmt.Println("git add Dockerfile")
	fmt.Println("git commit -m 'Adding Dockerfile'")
	if strings.Contains(flagGenerator, "service") {
		common.PrintlnL0("To create a new Docker Stack with Cloud 66 use the following command:\n\n")
		fmt.Printf("cx stacks create --name='CHANGEME' --environment='%s' --service_yaml=service.yml\n\n", flagEnvironment)
	}

	common.PrintlnTitle("Done")
}

//Transform format functions

type Build_Command struct {
	Build         Build `yaml:"dockerfile,omitempty"`
	Build_Command string `yaml:"build,omitempty"`
}

type Build struct {
	Dockerfile string `yaml:"dockerfile,omitempty"`
}

type Deploy struct {
	Resources Resources `yaml:"resources,omitempty"`
}

type Resources struct {
	Limits Limits `yaml:"limits,omitempty"`
}

type Limits struct {
	Cpus   string `yaml:"cpus,omitempty"`
	Memory string `yaml:"memory,omitempty"`
}

type Command struct {
	Command []string `yaml:"command,omitempty"`
}

type Volumes struct {
	Volumes []string `yaml:"volumes,omitempty"`
}

type Env_file struct {
	Env_file []string `yaml:"env_file,omitempty"`
}

type EnvVars struct {
	EnvVars []string `yaml:"environment,omitempty"`
}

type Ports struct {
	Port        []Port `yaml:"ports,omitempty"`
	ShortSyntax []string `yaml:"shortsyntax,omitempty"`
}

type Port struct {
	Target    string `yaml:"target,omitempty"`
	Published string `yaml:"published,omitempty"`
	Protocol  string `yaml:"protocol,omitempty"`
	Mode      string `yaml:"mode,omitempty"`
}

//handle dynamic keys and other edge cases
/*
func (e *Docker_compose) UnmarshalYAML(unmarshal func(interface{}) error) error {

       var services map[string]Service

       if err := unmarshal(&services); err != nil {
	       // Here we expect an error because a boolean cannot be converted to a
	       // a MajorVersion
	       if _, ok := err.(*yaml.TypeError); !ok {
		       return err
	       }
       }

       e.Services = services
       return nil
}
*/
func (e *Build_Command) UnmarshalYAML(unmarshal func(interface{}) error) error {

	var build Build
	err := unmarshal(&build)
	if err != nil {
		var single string
		err := unmarshal(&single)
		if err != nil {
			return err
		}
		e.Build_Command = single
	} else {
		e.Build.Dockerfile = build.Dockerfile
	}
	return nil
}

func (sm *Volumes) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var multi []string
	err := unmarshal(&multi)
	if err != nil {
		var single string
		err := unmarshal(&single)
		if err != nil {
			return err
		}
		sm.Volumes = make([]string, 1)
		sm.Volumes[0] = single
	} else {
		sm.Volumes = multi
	}
	return nil
}

func (ef *Env_file) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var multi []string
	err := unmarshal(&multi)
	if err != nil {
		var single string
		err := unmarshal(&single)
		if err != nil {
			return err
		}
		ef.Env_file = make([]string, 1)
		ef.Env_file[0] = single
	} else {
		ef.Env_file = multi
	}
	return nil
}

func (sm *EnvVars) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var multi []string
	err := unmarshal(&multi)
	if err != nil {
		var single string
		err := unmarshal(&single)
		if err != nil {
			return err
		}
		sm.EnvVars = make([]string, 1)
		sm.EnvVars[0] = single
	} else {
		sm.EnvVars = multi
	}
	return nil
}

//unsupported warnings

func (sm *Command) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var multi []string
	err := unmarshal(&multi)
	if err != nil {
		var single string
		err := unmarshal(&single)
		if err != nil {
			return err
		}
		sm.Command = make([]string, 1)
		sm.Command[0] = single
	} else {
		sm.Command = multi
	}
	return nil
}

func (p *Ports) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var multiPorts []Port
	err := unmarshal(&multiPorts)
	if err != nil {
		var singlePort Port
		err := unmarshal(&singlePort)
		if err != nil {
			var multiString []string
			err := unmarshal(&multiString)
			if err != nil {
				var single string
				err := unmarshal(&single)
				if err != nil {
					return err
				}
				p.ShortSyntax = make([]string, 1)
				p.ShortSyntax[0] = single
			} else {
				p.ShortSyntax = multiString
			}
			return nil
		}
		p.Port = make([]Port, 1)
		p.Port[0] = singlePort
	} else {
		p.Port = multiPorts
	}
	return nil
}

type Service struct {
	Command           Command `yaml:"command,omitempty"`
	Ports             Ports `yaml:"ports,omitempty"`
	Build_Command     Build_Command `yaml:"build,omitempty"`
	Image             string `yaml:"image,omitempty"`
	Depends_on        []string `yaml:"depends_on,omitempty"`
	EnvVars           []string `yaml:"environment,omitempty"`
	Deploy            Deploy `yaml:"deploy,omitempty"`
	Volumes           Volumes `yaml:"volumes,omitempty"`
	Stop_grace_period string `yaml:"stop_grace_period,omitempty"`
	Working_dir       string `yaml:"working_dir,omitempty"`
	Privileged        bool `yaml:"privileged,omitempty"`
	Labels            []string `yaml:"labels,omitempty"`
	Expose            []string `yaml:"expose,omitempty"`
	Env_file          Env_file `yaml:"env_file,omitempty"`

	//unsupported docker-compose specifications
	Links          Links
	Cap_add        Cap_add
	Cap_drop       Cap_drop
	Logging        Logging
	Cgroup_parent  Cgroup_parent
	Container_name Container_name
	Devices        Devices
	Dns            Dns
	Dns_search     Dns
	External_links Links
	Extra_hosts    Extra_hosts
	Isolation      Isolation
	Networks       Networks
	Pid            Extra_hosts
	Secrets        Secrets
	Security_opt   Security_opt
	Userns_mode    Userns_mode
	Ulimits        Ulimits
	Healthcheck    Healthcheck
}

//main transformation format function
func transform(filename string, formatTarget string) (bool, error) {

	var err error
	_, err = os.Stat(formatTarget)

	// create file if not exists
	if os.IsNotExist(err) {
		var file, err = os.Create(formatTarget)
		checkError(err)
		defer file.Close()
	} else {
		common.PrintError("File %s already exists!\n", formatTarget)
		return false, err
	}

	//HANDLE ENV_VARS
	dockerComp, _ := os.Open(filename)

	var dockerLines []string

	scanner := bufio.NewScanner(dockerComp)
	for scanner.Scan() {
		dockerLines = append(dockerLines, scanner.Text())
	}

	var countUpper, countLower, firstNonSpace int
	var hasCol bool
	var dockerText string

	initialDocker := dockerLines
	initialDockerText := ""

	for i := 0; i < len(dockerLines); i++ {

		initialDockerText += initialDocker[i] + "\n"

		countUpper = 0
		countLower = 0
		firstNonSpace = -1
		var j int
		for j = 0; j < len(dockerLines[i]); j++ {
			if !unicode.IsSpace(rune(dockerLines[i][j])) {
				firstNonSpace = j
				break
			}
		}
		if firstNonSpace > 0 {
			if dockerLines[i][firstNonSpace] != '-' && !unicode.IsLower(rune(dockerLines[i][firstNonSpace])) {

				for ; j < len(dockerLines[i]); j++ {
					if unicode.IsUpper(rune(dockerLines[i][j])) {
						countUpper++
					}
					if unicode.IsLower(rune(dockerLines[i][j])) {
						countLower++
					}
					if (dockerLines[i][j] == ':' || dockerLines[i][j] == '=') && countUpper > 1 {
						if j+1 < len(dockerLines[i]) {
							if dockerLines[i][j+1] == ' ' {
								var envKey, envValue string
								var k int
								for k = 0; k <= j; k++ {
									envKey += string(dockerLines[i][k])
								}
								for k = k + 1; k < len(dockerLines[i]); k++ {
									envValue += string(dockerLines[i][k])
								}
								dockerLines[i] = envKey + envValue
							}
							hasCol = true
							break
						}
					}
				}
				if countUpper > 1 && countLower == 0 {
					hasCol = true
				}
				if countUpper > 1 && hasCol && dockerLines[i][firstNonSpace] != '-' {
					environmentVar := ""
					for j = firstNonSpace; j < len(dockerLines[i]); j++ {
						environmentVar += string(dockerLines[i][j])
					}
					dockerLines[i] = "     - " + environmentVar
				}
			}
		}
		dockerText += dockerLines[i] + "\n"
	}
	auxFile := filename + "aux"

	dockerComp, _ = os.Create(auxFile)
	_, err = dockerComp.WriteString(dockerText)

	err = dockerComp.Sync()
	checkError(err)

	dockerComp.Close()

	yamlFile, err := ioutil.ReadFile(auxFile)

	//d := make(map[string]Docker_compose)
	//s := make(map[string]map[string]common.Service)
	dbs := []string{}
	isDB := false
	//var serviceyml Serviceyml
	/*
		if err := yaml.Unmarshal([]byte(yamlFile), &d); err != nil {
			fmt.Println(err.Error())
		}
	*/
	dockerCompose := Docker_compose{
		Services: make(map[string]Service),
		Version:  "",
	}

	serviceYaml := Serviceyml{
		Services: make(map[string]common.Service),
		Dbs:      make([]string, 0),
	}


	if err := yaml.Unmarshal([]byte(yamlFile), &dockerCompose); err != nil {
		fmt.Println(err.Error())
	}


	if len(dockerCompose.Services) == 0 {
		d:= make(map[string]Service)
		err = yaml.Unmarshal([]byte(yamlFile), &d)
		checkError(err)




		for k, v := range d {
			var current_db string
			isDB = false

			if v.Image != "" {
				current_db, isDB = checkDB(v.Image)
			}
			if isDB {
				dbs = append(dbs, current_db)
			}
			if !isDB {
				var longSyntaxPorts []string
				longSyntaxPorts = v.Expose //expose and long syntax for ports dont work together..i think?
				if len(v.Ports.ShortSyntax) > 0 {
					for i := 0; i < len(v.Ports.ShortSyntax); i++ {
						longSyntaxPorts = append(longSyntaxPorts, v.Ports.ShortSyntax[i])
					}
				} else {
					longSyntaxPorts = []string{}
					for i := 0; i < len(v.Ports.Port); i++ {

						longSyntax := ""
						longSyntax = "target: " + v.Ports.Port[i].Target + "\n"

						if v.Ports.Port[i].Protocol == "udp" {
							longSyntax += "udp: " + v.Ports.Port[i].Published
							longSyntaxPorts = append(longSyntaxPorts, longSyntax)
						} else if v.Ports.Port[i].Protocol == "tcp" {
							reader := bufio.NewReader(os.Stdin)
							fmt.Printf("\nYou have chosen a TCP protocol for the port published at %s - should it be mapped as HTTP, HTTPS or TCP ? : ", v.Ports.Port[i].Published)
							var answer string
							answer, _ = reader.ReadString('\n')
							answer = strings.ToUpper(answer)
							if answer == "TCP\n" {
								longSyntax += "tcp: " + v.Ports.Port[i].Published
							} else if answer == "HTTP\n" {
								longSyntax += "http: " + v.Ports.Port[i].Published
							} else if answer == "HTTPS\n" {
								longSyntax += "http: " + v.Ports.Port[i].Published
							}
							longSyntaxPorts = append(longSyntaxPorts, longSyntax)
						}

					}
				}

				var gitPath string
				gitPath, err = common.GitRootDir("/")

				hasGit := common.HasGit(gitPath)

				var gitURL, gitBranch, buildRoot string
				if hasGit {
					//common.PrintlnWarning("HAS GIT here!")
					gitURL = common.RemoteGitUrl(gitPath)
					gitBranch = common.LocalGitBranch(gitPath)
					buildRoot, err = common.PathRelativeToGitRoot(gitPath)
				}

				var serviceYamlService common.Service
				serviceYamlService.GitRepo = gitURL
				serviceYamlService.GitBranch = gitBranch
				serviceYamlService.BuildRoot = buildRoot
				serviceYamlService.BuildCommand = v.Build_Command.Build_Command
				serviceYamlService.CommandSlice = v.Command.Command
				serviceYamlService.Image = v.Image
				serviceYamlService.Requires = v.Depends_on
				serviceYamlService.Volumes = v.Volumes.Volumes
				serviceYamlService.Stop_grace = v.Stop_grace_period
				serviceYamlService.Work_dir = v.Working_dir
				serviceYamlService.EnvVarsSlice = v.EnvVars
				serviceYamlService.Tags = v.Labels
				serviceYamlService.Dockerfile_path = v.Build_Command.Build.Dockerfile
				serviceYamlService.Privileged = v.Privileged
				serviceYamlService.Constraints = common.Constraints{
					Resources: common.Resources{
						Memory: v.Deploy.Resources.Limits.Memory,
						Cpu:    v.Deploy.Resources.Limits.Cpus,
					},
				}
				serviceYamlService.PortsShort = longSyntaxPorts

				if v.Env_file.Env_file != nil {
					var lines []string
					for i := 0; i < len(v.Env_file.Env_file); i++ {
						lines = readEnv_file(v.Env_file.Env_file[i])
						for j := 0; j < len(lines); j++ {
							serviceYamlService.EnvVarsSlice = append(serviceYamlService.EnvVarsSlice, lines[j])
						}
					}
				}

				//serviceYamlService.EnvVarsSlice = formatEnv_Vars(serviceYamlService.EnvVarsSlice)

				if serviceYamlService.Image != "" {
					serviceYamlService.GitRepo = ""
					serviceYamlService.GitBranch = ""
					serviceYamlService.BuildRoot = ""
				}
				// assign stuff via v, k is the service name
				serviceYaml.Services[k] = serviceYamlService

			}

		}
		
	}


	for k, v := range dockerCompose.Services {
		var current_db string
		isDB = false

		if v.Image != "" {
			current_db, isDB = checkDB(v.Image)
		}
		if isDB {
			dbs = append(dbs, current_db)
		}
		if !isDB {
			var longSyntaxPorts []string
			longSyntaxPorts = v.Expose //expose and long syntax for ports dont work together..i think?
			if len(v.Ports.ShortSyntax) > 0 {
				for i := 0; i < len(v.Ports.ShortSyntax); i++ {
					longSyntaxPorts = append(longSyntaxPorts, v.Ports.ShortSyntax[i])
				}
			} else {
				longSyntaxPorts = []string{}
				for i := 0; i < len(v.Ports.Port); i++ {

					longSyntax := ""
					longSyntax = "target: " + v.Ports.Port[i].Target + "\n"

					if v.Ports.Port[i].Protocol == "udp" {
						longSyntax += "udp: " + v.Ports.Port[i].Published
						longSyntaxPorts = append(longSyntaxPorts, longSyntax)
					} else if v.Ports.Port[i].Protocol == "tcp" {
						reader := bufio.NewReader(os.Stdin)
						fmt.Printf("\nYou have chosen a TCP protocol for the port published at %s - should it be mapped as HTTP, HTTPS or TCP ? : ", v.Ports.Port[i].Published)
						var answer string
						answer, _ = reader.ReadString('\n')
						answer = strings.ToUpper(answer)
						if answer == "TCP\n" {
							longSyntax += "tcp: " + v.Ports.Port[i].Published
						} else if answer == "HTTP\n" {
							longSyntax += "http: " + v.Ports.Port[i].Published
						} else if answer == "HTTPS\n" {
							longSyntax += "http: " + v.Ports.Port[i].Published
						}
						longSyntaxPorts = append(longSyntaxPorts, longSyntax)
					}

				}
			}

			var gitPath string
			gitPath, err = common.GitRootDir("/")

			hasGit := common.HasGit(gitPath)

			var gitURL, gitBranch, buildRoot string
			if hasGit {
				//common.PrintlnWarning("HAS GIT here!")
				gitURL = common.RemoteGitUrl(gitPath)
				gitBranch = common.LocalGitBranch(gitPath)
				buildRoot, err = common.PathRelativeToGitRoot(gitPath)
			}

			var serviceYamlService common.Service
			serviceYamlService.GitRepo = gitURL
			serviceYamlService.GitBranch = gitBranch
			serviceYamlService.BuildRoot = buildRoot
			serviceYamlService.BuildCommand = v.Build_Command.Build_Command
			serviceYamlService.CommandSlice = v.Command.Command
			serviceYamlService.Image = v.Image
			serviceYamlService.Requires = v.Depends_on
			serviceYamlService.Volumes = v.Volumes.Volumes
			serviceYamlService.Stop_grace = v.Stop_grace_period
			serviceYamlService.Work_dir = v.Working_dir
			serviceYamlService.EnvVarsSlice = v.EnvVars
			serviceYamlService.Tags = v.Labels
			serviceYamlService.Dockerfile_path = v.Build_Command.Build.Dockerfile
			serviceYamlService.Privileged = v.Privileged
			serviceYamlService.Constraints = common.Constraints{
				Resources: common.Resources{
					Memory: v.Deploy.Resources.Limits.Memory,
					Cpu:    v.Deploy.Resources.Limits.Cpus,
				},
			}
			serviceYamlService.PortsShort = longSyntaxPorts

			if v.Env_file.Env_file != nil {
				var lines []string
				for i := 0; i < len(v.Env_file.Env_file); i++ {
					lines = readEnv_file(v.Env_file.Env_file[i])
					for j := 0; j < len(lines); j++ {
						serviceYamlService.EnvVarsSlice = append(serviceYamlService.EnvVarsSlice, lines[j])
					}
				}
			}

			//serviceYamlService.EnvVarsSlice = formatEnv_Vars(serviceYamlService.EnvVarsSlice)

			if serviceYamlService.Image != "" {
				serviceYamlService.GitRepo = ""
				serviceYamlService.GitBranch = ""
				serviceYamlService.BuildRoot = ""
			}
			// assign stuff via v, k is the service name
			serviceYaml.Services[k] = serviceYamlService

		}

	}
	if len(dbs) != 0 {
		if dbs[len(dbs)-1] == "" {
			dbs = dbs[:len(dbs)-1]
		}
	}
	serviceYaml.Dbs = dbs

	file, err := yaml.Marshal(serviceYaml)

	err = ioutil.WriteFile("service.yml", file, 0644)
	if err != nil {
		log.Fatalf("ioutil.WriteFile: %v", err)
	}

	service_yml, er := os.OpenFile(formatTarget, os.O_RDWR, 0644)
	checkError(er)

	// write some text to file
	_, err = service_yml.WriteString(string(file))
	checkError(err)

	// save changes
	err = service_yml.Sync()
	checkError(err)

	service_yml.Close()

	//format long syntax ports
	service_yml, _ = os.Open(formatTarget)
	defer service_yml.Close()

	var lines []string
	scanner = bufio.NewScanner(service_yml)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}
	text := ""
	for i := 0; i < len(lines); i++ {
		if strings.Contains(lines[i], "cpu:") {
			lines[i] = formatCpu(lines[i])
		}
		if strings.Contains(lines[i], "env_vars:") {
			text += lines[i] + "\n"
			for i = i + 1; i < len(lines); i++ {
				if isEnv(lines[i]) {
					lines[i] = formatEnv_Vars(lines[i])
					text += lines[i] + "\n"
				} else {
					text += lines[i] + "\n"
					break
				}
			}
		} else {
			if lines[i] == "    - |-" {
				lines[i] = "    -"
			}
			text += lines[i] + "\n"
		}

	}

	//write the final service.yml
	service_yml, _ = os.Create(formatTarget)
	service_yml, er = os.OpenFile(formatTarget, os.O_RDWR, 0644)

	_, err = service_yml.WriteString(text)

	//rewrite the original docker-compose
	docker, _ := os.Create(filename)
	docker, er = os.OpenFile(filename, os.O_RDWR, 0644)

	err = docker.Sync()
	checkError(err)

	_, er = docker.WriteString(initialDockerText)
	docker.Close()

	err = os.Remove(auxFile)
	checkError(err)

	return true, err

}

func formatCpu(cpuString string) string {
	var i, auxInt, p int
	var auxString string
	//common.PrintlnTitle(cpuString)
	for i = 0; i < len(cpuString); i++ {
		if cpuString[i] == '\'' || cpuString[i] == '"' {
			p = i
			break
		}
	}
	for i = i + 1; i < len(cpuString); i++ {
		if cpuString[i] == '\'' || cpuString[i] == '"' {
			break
		} else {
			auxString += string(cpuString[i])
		}
	}
	auxFloat, err := strconv.ParseFloat(auxString, 64)
	checkError(err)
	fract := auxFloat - math.Floor(auxFloat)
	if auxFloat < 1 {
		auxInt = 1
	} else if fract < 0.5 {
		auxInt = int(math.Floor(auxFloat))
	} else {
		auxInt = int(math.Ceil(auxFloat))
	}
	cpuString = cpuString[:p] + strconv.Itoa(auxInt)
	return cpuString
}

func isEnv(line string) bool {
	for i := 0; i < len(line); i++ {
		if !unicode.IsSpace(rune(line[i])) {
			if line[i] == '-' {
				return true
			}
			break
		}
	}
	return false
}

func formatEnv_Vars(env string) string {
	var j int
	for j = 0; j < len(env); j++ {
		if env[j] == '-' {
			env = env[:j] + " " + env[j+1:]
		}
	}
	for ; j < len(env); j++ {
		if env[j] == '\'' {
			env = env[:j] + " " + env[j+1:]
		}
		if !unicode.IsSpace(rune(env[j])) {
			break
		}
	}
	for j = 0; j < len(env); j++ {
		if j+1 < len(env) {
			if env[j] == ':' {
				env = env[:j+1] + " " + env[j+1:]
				break
			}
			if env[j] == '=' {
				env = env[:j] + ": " + env[j+1:]
				break
			}
		}

	}
	for j = len(env) - 1; j >= 0; j-- {
		if env[j] == '-' {
			env = env[:j] + " " + env[j+1:]
		}
	}
	/*
	if env[i] == "" {
		env = append(env[:i], env[i+1:]...)
	}*/

	return env
}

func readEnv_file(path string) []string {
	var lines []string
	var env_vars []string

	envFile, err := os.Open(path)
	checkError(err)

	scanner := bufio.NewScanner(envFile)
	for scanner.Scan() {
		lines = append(lines, scanner.Text())
	}

	for i := 0; i < len(lines); i++ {

		if !isCommentLine(lines[i]) {
			env_vars = append(env_vars, lines[i])
		}
	}
	envFile.Close()
	return env_vars
}

func isCommentLine(line string) bool {
	var i int
	for i = 0; i < len(line); i++ {
		if !unicode.IsSpace(rune(line[i])) {
			break
		}
	}
	if line != "" {
		if line[i] == '#' {
			return true
		}
	}
	return false
}

func checkDB(image string) (string, bool) {
	db_check := []string{"mysql", "postgresql", "redis", "mongodb", "elasticsearch", "glusterfs", "influxdb", "rabbitmq", "sqlite"}
	var prefix string
	if len(image) < 5 {
		prefix = image
	} else {
		for i := 0; i < 4; i++ {
			prefix += string(image[i])
		}
	}
	for i := 0; i < len(db_check); i++ {
		if strings.Contains(image, db_check[i]) || strings.Contains(db_check[i], image) || strings.Contains(prefix, db_check[i]) || strings.Contains(db_check[i], prefix) {
			return db_check[i], true
		}
	}
	return "", false
}

func checkError(err error) {
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(0)
	}
}

func analyze(
	updateTemplates bool,
	path string,
	templates string,
	environment string,
	noPrompt bool,
	overwrite bool,
	generator string,
	git_repo string,
	git_branch string,
	use_registry bool,
) (*analysisResult, error) {

	if path == "" {
		pwd, err := os.Getwd()
		if err != nil {
			return nil, fmt.Errorf("Unable to detect current directory path due to %s", err.Error())
		}
		path = pwd
	}

	result := &analysisResult{Ok: false}

	// if templateFolder is specified we're going to use that otherwise download
	if templates == "" {
		homeDir, _ := homedir.Dir()

		templates = filepath.Join(homeDir, ".starter")
		if updateTemplates {
			err := getTempaltes(templates)
			if err != nil {
				return nil, fmt.Errorf("Failed to download latest templates due to %s", err.Error())
			}
		}

		dockerfileTemplateDir = templates
		serviceYAMLTemplateDir = templates
		dockerComposeYAMLTemplateDir = templates

	} else {
		common.PrintlnTitle("Using local templates at %s", templates)
		templates, err := filepath.Abs(templates)
		if err != nil {
			return nil, fmt.Errorf("Failed to use %s for templates due to %s", templates, err.Error())
		}
		dockerfileTemplateDir = templates
		serviceYAMLTemplateDir = templates
		dockerComposeYAMLTemplateDir = templates
	}

	common.PrintlnTitle("Detecting framework for the project at %s", path)

	pack, err := Detect(path)
	if err != nil {
		return nil, fmt.Errorf("Failed to detect framework due to: %s", err.Error())
	}

	// check for Dockerfile (before analysis to avoid wasting time)
	dockerfilePath := filepath.Join(path, "Dockerfile")
	if _, err := os.Stat(dockerfilePath); err == nil {
		// file exists. should we overwrite?
		if !overwrite {
			return nil, errors.New("Dockerfile already exists. Use overwrite flag to overwrite it")
		}
	}

	serviceYAMLPath := filepath.Join(path, "service.yml")
	if _, err := os.Stat(serviceYAMLPath); err == nil {
		// file exists. should we overwrite?
		if !overwrite {
			return nil, errors.New("service.yml already exists. Use overwrite flag to overwrite it")
		}
	}

	//get all the support language versions
	if use_registry {
		url := "https://registry-1.docker.io/"
		username := "" // anonymous
		password := "" // anonymous
		hub, err := registry.New(url, username, password)
		if err != nil {
			return nil, errors.New("can't connect to docker registry to check for allowed base images")
		}

		tags, err := hub.Tags("library/" + pack.Name())
		if err != nil {
			return nil, errors.New("can't find the tags for this pack")
		}
		tags = Filter(tags, func(v string) bool {
			ok, _ := regexp.MatchString(`^\d+.\d+.\d+$`, v)
			return ok
		})

		pack.SetSupportedLanguageVersions(tags)
	}

	err = pack.Analyze(path, environment, !noPrompt, git_repo, git_branch)
	if err != nil {
		return nil, fmt.Errorf("Failed to analyze the project due to: %s", err.Error())
	}

	err = pack.WriteDockerfile(dockerfileTemplateDir, path, !noPrompt)
	if err != nil {
		return nil, fmt.Errorf("Failed to write Dockerfile due to: %s", err.Error())
	}

	if strings.Contains(generator, "service") {
		err = pack.WriteServiceYAML(serviceYAMLTemplateDir, path, !noPrompt)
		if err != nil {
			return nil, fmt.Errorf("Failed to write service.yml due to: %s", err.Error())
		}
	}

	if strings.Contains(generator, "docker-compose") {
		err = pack.WriteDockerComposeYAML(dockerComposeYAMLTemplateDir, path, !noPrompt)
		if err != nil {
			return nil, fmt.Errorf("Failed to write docker-compose.yml due to: %s", err.Error())
		}
	}

	if len(pack.GetMessages()) > 0 {
		for _, warning := range pack.GetMessages() {
			result.Warnings = append(result.Warnings, warning)
		}
	}

	result.Ok = true
	result.Language = pack.Name()
	result.LanguageVersion = pack.LanguageVersion()
	result.Framework = pack.Framework()
	result.FrameworkVersion = pack.FrameworkVersion()
	result.Databases = pack.GetDatabases()
	result.StartCommands = pack.GetStartCommands()
	result.SupportedLanguageVersions = pack.GetSupportedLanguageVersions()
	result.BuildCommands = []string{}
	result.DeployCommands = []string{}

	return result, nil
}
